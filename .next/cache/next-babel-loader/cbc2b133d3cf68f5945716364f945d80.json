{"ast":null,"code":"var _jsxFileName = \"/Users/ashleysaleem-west/Documents/GitHub/next-blog/pages/blog/[slug].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fs from 'fs';\nimport path from 'path';\nimport Head from 'next/head';\nimport matter from 'gray-matter'; //parses metadata from markdown\n\nimport marked from 'marked'; //turns markdown into html\n\nimport Layout from '../components/Layout';\n\nconst Post = ({\n  htmlString,\n  data\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }\n  }, data.title), __jsx(\"meta\", {\n    title: \"description\",\n    content: data.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"blog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: htmlString\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport const getStaticPaths = async () => {\n  const files = fs.readdirSync('posts');\n  const paths = files.map(filename => ({\n    params: {\n      slug: filename.replace(\".md\", \"\")\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}; // this is a new SSG function, it create the path\n\nexport const getStaticProps = async ({\n  params: {\n    slug\n  }\n}) => {\n  const markdownWithMeta = fs.readFileSync(path.join('posts', slug + '.md')).toString();\n  const parsedMarkdown = matter(markdownWithMeta);\n  const htmlString = marked(parsedMarkdown.content);\n  return {\n    props: {\n      htmlString,\n      data: parsedMarkdown.data\n    }\n  };\n}; // this function fetches the data to create the path\n\nexport default Layout(Post); // this generates dynamic routes \n// import { useRouter } from 'next/router'\n// import ErrorPage from 'next/error'\n// import Container from '../../components/container'\n// import PostBody from '../../components/post-body'\n// import Header from '../../components/header'\n// import PostHeader from '../../components/post-header'\n// import Layout from '../../components/layout'\n// import { getPostBySlug, getAllPosts } from '../../lib/api'\n// import PostTitle from '../../components/post-title'\n// import Head from 'next/head'\n// import { CMS_NAME } from '../../lib/constants'\n// import markdownToHtml from '../../lib/markdownToHtml'\n// export default function Post({ post, morePosts, preview }) {\n//   const router = useRouter()\n//   if (!router.isFallback && !post?.slug) {\n//     return <ErrorPage statusCode={404} />\n//   }\n//   return (\n//     <Layout preview={preview}>\n//       <Container>\n//         <Header />\n//         {router.isFallback ? (\n//           <PostTitle>Loading…</PostTitle>\n//         ) : (\n//           <>\n//             <article className=\"mb-32\">\n//               <Head>\n//                 <title>\n//                   {post.title} | Next.js Blog Example with {CMS_NAME}\n//                 </title>\n//                 <meta property=\"og:image\" content={post.ogImage.url} />\n//               </Head>\n//               <PostHeader\n//                 title={post.title}\n//                 coverImage={post.coverImage}\n//                 date={post.date}\n//                 author={post.author}\n//               />\n//               <PostBody content={post.content} />\n//             </article>\n//           </>\n//         )}\n//       </Container>\n//     </Layout>\n//   )\n// }\n// export async function getStaticProps({ params }) {\n//   const post = getPostBySlug(params.slug, [\n//     'title',\n//     'date',\n//     'slug',\n//     'author',\n//     'content',\n//     'ogImage',\n//     'coverImage',\n//   ])\n//   const content = await markdownToHtml(post.content || '')\n//   return {\n//     props: {\n//       post: {\n//         ...post,\n//         content,\n//       },\n//     },\n//   }\n// }\n// export async function getStaticPaths() {\n//   const posts = getAllPosts(['slug'])\n//   return {\n//     paths: posts.map((post) => {\n//       return {\n//         params: {\n//           slug: post.slug,\n//         },\n//       }\n//     }),\n//     fallback: false,\n//   }\n// }","map":{"version":3,"sources":["/Users/ashleysaleem-west/Documents/GitHub/next-blog/pages/blog/[slug].js"],"names":["React","fs","path","Head","matter","marked","Layout","Post","htmlString","data","title","description","__html","getStaticPaths","files","readdirSync","paths","map","filename","params","slug","replace","fallback","getStaticProps","markdownWithMeta","readFileSync","join","toString","parsedMarkdown","content","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAAkC;;AAClC,OAAOC,MAAP,MAAmB,QAAnB,C,CAA6B;;AAC7B,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAwB;AACjC,SACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,IAAI,CAACC,KAAb,CADJ,EAEI;AAAM,IAAA,KAAK,EAAC,aAAZ;AAA0B,IAAA,OAAO,EAAED,IAAI,CAACE,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAEJ;AAAV,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,CADJ;AAUF,CAXF;;AAaA,OAAO,MAAMK,cAAc,GAAG,YAAY;AAEtC,QAAMC,KAAK,GAAGb,EAAE,CAACc,WAAH,CAAe,OAAf,CAAd;AAEA,QAAMC,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAUC,QAAQ,KAAK;AACjCC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAEF,QAAQ,CAACG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB;AADF;AADyB,GAAL,CAAlB,CAAd;AAMA,SAAO;AACHL,IAAAA,KADG;AAEHM,IAAAA,QAAQ,EAAE;AAFP,GAAP;AAIH,CAdM,C,CAeP;;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAO;AAACJ,EAAAA,MAAM,EAAE;AAACC,IAAAA;AAAD;AAAT,CAAP,KAA4B;AAEtD,QAAMI,gBAAgB,GAAGvB,EAAE,CAACwB,YAAH,CAAgBvB,IAAI,CAACwB,IAAL,CAAU,OAAV,EAAmBN,IAAI,GAAC,KAAxB,CAAhB,EAAgDO,QAAhD,EAAzB;AAEA,QAAMC,cAAc,GAAGxB,MAAM,CAACoB,gBAAD,CAA7B;AAEA,QAAMhB,UAAU,GAAGH,MAAM,CAACuB,cAAc,CAACC,OAAhB,CAAzB;AAEA,SAAO;AACHC,IAAAA,KAAK,EAAE;AACHtB,MAAAA,UADG;AAEHC,MAAAA,IAAI,EAAEmB,cAAc,CAACnB;AAFlB;AADJ,GAAP;AAMH,CAdM,C,CAeP;;AAEA,eAAeH,MAAM,CAACC,IAAD,CAArB,C,CAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport fs from 'fs';\nimport path from 'path';\nimport Head from 'next/head';\nimport matter from 'gray-matter'; //parses metadata from markdown\nimport marked from 'marked'; //turns markdown into html\nimport Layout from '../components/Layout'\n\nconst Post = ({htmlString, data}) => {\n    return(\n        <>\n            <Head>\n                <title>{data.title}</title>\n                <meta title=\"description\" content={data.description}/>\n            </Head>\n            <div className=\"blog\">\n                <div dangerouslySetInnerHTML={{ __html: htmlString }} />\n            </div>\n        </>\n)}; \n\nexport const getStaticPaths = async () => {\n\n    const files = fs.readdirSync('posts')\n\n    const paths = files.map(filename => ({\n        params: {\n            slug: filename.replace(\".md\", \"\")\n        }\n    }))\n\n    return {\n        paths,\n        fallback: false\n    }\n}\n// this is a new SSG function, it create the path\n\nexport const getStaticProps = async ({params: {slug}}) => {\n\n    const markdownWithMeta = fs.readFileSync(path.join('posts', slug+'.md')).toString();\n\n    const parsedMarkdown = matter(markdownWithMeta)\n\n    const htmlString = marked(parsedMarkdown.content)\n\n    return {\n        props: {\n            htmlString,\n            data: parsedMarkdown.data\n        }\n    }\n}\n// this function fetches the data to create the path\n\nexport default Layout(Post);\n\n// this generates dynamic routes \n\n\n\n// import { useRouter } from 'next/router'\n// import ErrorPage from 'next/error'\n// import Container from '../../components/container'\n// import PostBody from '../../components/post-body'\n// import Header from '../../components/header'\n// import PostHeader from '../../components/post-header'\n// import Layout from '../../components/layout'\n// import { getPostBySlug, getAllPosts } from '../../lib/api'\n// import PostTitle from '../../components/post-title'\n// import Head from 'next/head'\n// import { CMS_NAME } from '../../lib/constants'\n// import markdownToHtml from '../../lib/markdownToHtml'\n\n// export default function Post({ post, morePosts, preview }) {\n//   const router = useRouter()\n//   if (!router.isFallback && !post?.slug) {\n//     return <ErrorPage statusCode={404} />\n//   }\n//   return (\n//     <Layout preview={preview}>\n//       <Container>\n//         <Header />\n//         {router.isFallback ? (\n//           <PostTitle>Loading…</PostTitle>\n//         ) : (\n//           <>\n//             <article className=\"mb-32\">\n//               <Head>\n//                 <title>\n//                   {post.title} | Next.js Blog Example with {CMS_NAME}\n//                 </title>\n//                 <meta property=\"og:image\" content={post.ogImage.url} />\n//               </Head>\n//               <PostHeader\n//                 title={post.title}\n//                 coverImage={post.coverImage}\n//                 date={post.date}\n//                 author={post.author}\n//               />\n//               <PostBody content={post.content} />\n//             </article>\n//           </>\n//         )}\n//       </Container>\n//     </Layout>\n//   )\n// }\n\n// export async function getStaticProps({ params }) {\n//   const post = getPostBySlug(params.slug, [\n//     'title',\n//     'date',\n//     'slug',\n//     'author',\n//     'content',\n//     'ogImage',\n//     'coverImage',\n//   ])\n//   const content = await markdownToHtml(post.content || '')\n\n//   return {\n//     props: {\n//       post: {\n//         ...post,\n//         content,\n//       },\n//     },\n//   }\n// }\n\n// export async function getStaticPaths() {\n//   const posts = getAllPosts(['slug'])\n\n//   return {\n//     paths: posts.map((post) => {\n//       return {\n//         params: {\n//           slug: post.slug,\n//         },\n//       }\n//     }),\n//     fallback: false,\n//   }\n// }\n\n"]},"metadata":{},"sourceType":"module"}