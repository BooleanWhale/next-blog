{"ast":null,"code":"var _jsxFileName = \"/Users/ashleysaleem-west/Documents/GitHub/next-blog/pages/[slug].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fs from 'fs';\nimport path from 'path';\nimport Head from 'next/head';\nimport matter from 'gray-matter'; //parses metadata from markdown\n\nimport marked from 'marked'; //turns markdown into html\n\nconst Post = ({\n  contents,\n  data\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }, data.title), __jsx(\"meta\", {\n    title: \"description\",\n    content: data.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, \"Contents bellow:\"), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, contents));\n};\n\nexport const getStaticPaths = async () => {\n  const files = fs.readdirSync('posts');\n  console.log('files: ', files);\n  const paths = files.map(filename => ({\n    params: {\n      slug: filename.replace(\".md\", \"\")\n    }\n  }));\n  console.log('paths: ', paths);\n  return {\n    paths,\n    fallback: false\n  };\n}; // this is a new SSG function, it create the path\n\nexport const getStaticProps = async ({\n  params: {\n    slug\n  }\n}) => {\n  const markdownWithMeta = fs.readFileSync(path.join('posts', slug + '.md')).toString();\n  const parsedMarkdown = matter(markdownWithMeta);\n  return {\n    props: {\n      contents: parsedMarkdown.content,\n      data: parsedMarkdown.data\n    }\n  };\n}; // this function fetches the data to create the path\n\nexport default Post; // this generates dynamic routes","map":{"version":3,"sources":["/Users/ashleysaleem-west/Documents/GitHub/next-blog/pages/[slug].js"],"names":["React","fs","path","Head","matter","marked","Post","contents","data","title","description","getStaticPaths","files","readdirSync","console","log","paths","map","filename","params","slug","replace","fallback","getStaticProps","markdownWithMeta","readFileSync","join","toString","parsedMarkdown","props","content"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAAkC;;AAClC,OAAOC,MAAP,MAAmB,QAAnB,C,CAA6B;;AAE7B,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAAsB;AAC/B,SACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,IAAI,CAACC,KAAb,CADJ,EAEI;AAAM,IAAA,KAAK,EAAC,aAAZ;AAA0B,IAAA,OAAO,EAAED,IAAI,CAACE,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMH,QAAN,CANJ,CADJ;AASF,CAVF;;AAYA,OAAO,MAAMI,cAAc,GAAG,YAAY;AAEtC,QAAMC,KAAK,GAAGX,EAAE,CAACY,WAAH,CAAe,OAAf,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;AAEA,QAAMI,KAAK,GAAGJ,KAAK,CAACK,GAAN,CAAUC,QAAQ,KAAK;AACjCC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAEF,QAAQ,CAACG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB;AADF;AADyB,GAAL,CAAlB,CAAd;AAKAP,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,KAAvB;AAEA,SAAO;AACHA,IAAAA,KADG;AAEHM,IAAAA,QAAQ,EAAE;AAFP,GAAP;AAIH,CAhBM,C,CAiBP;;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAO;AAACJ,EAAAA,MAAM,EAAE;AAACC,IAAAA;AAAD;AAAT,CAAP,KAA4B;AAEtD,QAAMI,gBAAgB,GAAGvB,EAAE,CAACwB,YAAH,CAAgBvB,IAAI,CAACwB,IAAL,CAAU,OAAV,EAAmBN,IAAI,GAAC,KAAxB,CAAhB,EAAgDO,QAAhD,EAAzB;AAEA,QAAMC,cAAc,GAAGxB,MAAM,CAACoB,gBAAD,CAA7B;AAEA,SAAO;AACHK,IAAAA,KAAK,EAAE;AACHtB,MAAAA,QAAQ,EAAEqB,cAAc,CAACE,OADtB;AAEHtB,MAAAA,IAAI,EAAEoB,cAAc,CAACpB;AAFlB;AADJ,GAAP;AAMH,CAZM,C,CAaP;;AAEA,eAAeF,IAAf,C,CAEA","sourcesContent":["import React from 'react';\nimport fs from 'fs';\nimport path from 'path';\nimport Head from 'next/head';\nimport matter from 'gray-matter'; //parses metadata from markdown\nimport marked from 'marked'; //turns markdown into html\n\nconst Post = ({contents, data}) => {\n    return(\n        <>\n            <Head>\n                <title>{data.title}</title>\n                <meta title=\"description\" content={data.description}/>\n            </Head>\n            <div>Contents bellow:</div>\n            <pre>{contents}</pre>\n        </>\n)}; \n\nexport const getStaticPaths = async () => {\n\n    const files = fs.readdirSync('posts')\n    console.log('files: ', files)\n\n    const paths = files.map(filename => ({\n        params: {\n            slug: filename.replace(\".md\", \"\")\n        }\n    }))\n    console.log('paths: ', paths)\n\n    return {\n        paths,\n        fallback: false\n    }\n}\n// this is a new SSG function, it create the path\n\nexport const getStaticProps = async ({params: {slug}}) => {\n\n    const markdownWithMeta = fs.readFileSync(path.join('posts', slug+'.md')).toString();\n\n    const parsedMarkdown = matter(markdownWithMeta)\n\n    return {\n        props: {\n            contents: parsedMarkdown.content,\n            data: parsedMarkdown.data\n        }\n    }\n}\n// this function fetches the data to create the path\n\nexport default Post;\n\n// this generates dynamic routes "]},"metadata":{},"sourceType":"module"}